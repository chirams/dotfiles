" neocomplete {{{
" -------------------------------------------------
"

" 起動時に有効化
let g:neocomplete#enable_at_startup = 1
" 大文字が入力されるまで大文字小文字の区別を無視する
let g:neocomplete#enable_smart_case = 1
" _(アンダースコア)区切りの補完を有効化
let g:neocomplete#enable_underbar_completion = 1
let g:neocomplete#enable_camel_case_completion  =  1
" ポップアップメニューで表示される候補の数
let g:neocomplete#max_list = 20
" シンタックスをキャッシュするときの最小文字長
let g:neocomplete#sources#syntax#min_keyword_length = 3
" 補完を表示する最小文字数
let g:neocomplete#auto_completion_start_length = 2
" preview window を閉じない
let g:neocomplete#enable_auto_close_preview = 0

if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:neocomplete#force_omni_input_patterns.typescript = '[^. \t]\.\%(\h\w*\)\?' " Same as JavaScript
let g:neocomplete#force_omni_input_patterns.go = '[^. \t]\.\%(\h\w*\)\?'         " Same as JavaScript

" " 自動で補完候補を出さない
" let g:neocomplete#disable_auto_complete = 1
" " メニューの一番目を自動選択
" let g:neocomplete#enable_auto_select = 1
"<Ctrl+Space> ：手動補完候補表示
inoremap <expr><nul> pumvisible() ? "\<down>" : neocomplete#start_manual_complete()
" 補完をキャンセルしてカーソル移動(ここらへんはご自由に！)
inoremap <expr><left> neocomplete#cancel_popup() . "\<left>"
inoremap <expr><right> neocomplete#cancel_popup() . "\<right>"

" }}}


" neocomplete-php {{{
" -------------------------------------------------
"

let g:neocomplete_php_locale = 'ja'

" }}}


" NeoSnippet {{{
" -------------------------------------------------
"

imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)

" }}}


" taglist {{{
" -------------------------------------------------
"

" `" ctagsのコマンド
" `let g:Tlist_Ctags_Cmd = "ctags"
" `" 現在表示中のファイルのみのタグしか表示しない
" `let g:Tlist_Show_One_File = 1
" `" 右側にtag listのウインドうを表示する
" `let g:Tlist_Use_Right_Window = 1
" `" taglistのウインドウだけならVimを閉じる
" `let g:Tlist_Exit_OnlyWindow = 1
" `" \lでtaglistウインドウを開いたり閉じたり出来るショートカット
" `map <silent> <leader>l :TlistToggle<CR>
" `"tagbar {{{
" `set tags=./tags,tags
" `Ctrl+h・Ctrl+kでタグジャンプ

" }}}


" syntastic {{{
" -------------------------------------------------
"

" :SyntasticToggleMod

" phpの構文チェック(phpcs, phpmdは使わない)
let g:syntastic_enable_signs=1
" 競合対策
let g:syntastic_always_populate_loc_list = 1
" 構文エラーリストの表示
let g:syntastic_auto_loc_list=0
" パッシブモードの一覧 （スキャンする場合は、:SyntasticCheck
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go', 'java'] }

" let g:syntastic_php_checkers = ['php']
" let g:syntastic_cpp_checkers = ['cc']
" let g:syntastic_cpp_check_header = 1
" let g:syntastic_cpp_lib_path = '/home/y/lib,/home/y/lib64'
" let g:syntastic_js_checkers = ['jshint']
" let g:syntastic_javascript_checkers = ['jshint']
" let g:syntastic_python_checker = 'flake8 --ignore=E501'
" let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
" let g:syntastic_coffee_checkers = ['coffeelint']
" let g:syntastic_scss_checkers = ['scss_lint']
" let g:syntastic_ruby_checkers = ['rubocop']

let g:syntastic_java_javac_config_file_enabled = 1
let g:syntastic_java_javac_autoload_maven_classpath = 1
let g:syntastic_java_javac_config_file_enabled = 1
let g:syntastic_java_javac_classpath = '$PROJECT/src:$PROJECT2/jars/*.jar;$HOME/.m2'


" 保存時に実行しない
let g:syntastic_check_on_wq = 0

let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'

" }}}


" Tagber {{{
" -------------------------------------------------
"

map <silent> <leader>l :TagbarToggle<CR>

" }}}

" auto-ctags.vim {{{
" -------------------------------------------------
"

" 自動的にタグを生成
let g:auto_ctags = 0

" }}}

" share yank {{{
" -------------------------------------------------
"

map <silent> sy :call YanktmpYank()<CR>
map <silent> sp :call YanktmpPaste_p()<CR>
map <silent> sP :call YanktmpPaste_P()<CR>

" }}}


" NERDTreeToggle {{{
" -------------------------------------------------
"

" ブックマークを最初から表示
let g:NERDTreeShowBookmarks=1

" ファイル指定で開かれた場合はNERDTreeは表示しない
autocmd StdinReadPre * let s:std_in=2
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | wincmd p | endif

" 終了時に自動クローズ
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" キーバインド
nmap <F9> :NERDTreeToggle<CR>

" }}}


" vim-indent-guides {{{
" -------------------------------------------------
"

" vimを立ち上げたときに、自動的にvim-indent-guidesをオンにする
let g:indent_guides_enable_on_vim_startup = 1

" ガイド開始インデント
let g:indent_guides_start_level = 2
" ガイド幅
let g:indent_guides_guide_size = 1

" 無効にするファイルタイプ
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'tagbar', 'unite']

" 配色の自動設定
let g:indent_guides_auto_colors = 0
" 配色 (奇数/偶数)
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=113
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=140

" }}}


" vim-gitgutter {{{
" -------------------------------------------------
"

" 変更箇所をデフォルトでハイライト
let g:gitgutter_highlight_lines = 0

" ハイライトをトグル
nnoremap <silent> ,gg :<C-u>GitGutterToggle<CR>
nnoremap <silent> ,gh :<C-u>GitGutterLineHighlightsToggle<CR>

" }}}


" lightline {{{
" -------------------------------------------------
"

let g:lightline = {
            \}

function! MyModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
                \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                \  &ft == 'unite' ? unite#get_status_string() :
                \  &ft == 'vimshell' ? vimshell#get_status_string() :
                \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
    return &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head') && strlen(fugitive#head()) ? ''.fugitive#head() : ''
endfunction

function! MyFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ 'mode_map': {'c': 'NORMAL'},
            \ 'active': {
            \   'left': [
            \    [ 'mode', 'paste' ],
            \    [ 'readonly', 'fugitive', 'filename', 'modified' ]
            \   ],
            \   'right': [
            \    [ 'syntastic', 'lineinfo' ],
            \    ['percent'],
            \    [ 'fileformat', 'fileencoding', 'filetype' ]
            \   ]
            \ },
            \ 'component_function': {
            \   'modified': 'MyModified',
            \   'readonly': 'MyReadonly',
            \   'fugitive': 'MyFugitive',
            \   'filename': 'MyFilename',
            \   'fileformat': 'MyFileformat',
            \   'filetype': 'MyFiletype',
            \   'fileencoding': 'MyFileencoding',
            \   'mode': 'MyMode',
            \   'syntastic': 'SyntasticStatuslineFlag',
            \ }
            \ }


" }}}


" vim-template {{{
" -------------------------------------------------
"

autocmd BufNewFile *.md 0r $HOME/.vim/template/template.md
" テンプレート中に含まれる特定文字列を置き換える
" autocmd User:plugin-template-loaded silent %s/<%=\(.\{-}\)%>/\=eval(submatch(1))/ge
" <+CURSOR+> にカーソルを移動する: >
" autocmd User:plugin-template-loaded if search('<+CURSOR+>') | execute 'normal! "_da>' | endif
" autocmd User plugin-template-loaded if search('<+CURSOR+>') | execute 'normal! "_da>' | endif

" }}}


" vim-json {{{
" -------------------------------------------------
"

set conceallevel=0
let g:vim_json_syntax_conceal = 0

" }}}

" vim-go {{{
" -------------------------------------------------
" https://github.com/fatih/vim-go
"

" " syntax-highlighting
" let g:go_highlight_functions = 1
" let g:go_highlight_methods = 1
" let g:go_highlight_fields = 1
" let g:go_highlight_types = 1
" let g:go_highlight_operators = 1
" let g:go_highlight_build_constraints = 1
"
" let g:go_fmt_command = "goimports"
"
" let g:go_fmt_fail_silently = 1
" let g:go_fmt_autosave = 0
" let g:go_play_open_browser = 0
" let g:go_get_update = 0
" let g:go_list_type = "quickfix"

" warn
let g:go_version_warning = 0

" }}}


" plantuml {{{
" -------------------------------------------------
"
" plantumlスクリプトの設定
" let g:plantuml_executable_script="~/.local/bin/_plantuml"

" }}}


" <> {{{
" -------------------------------------------------
"

" }}}
